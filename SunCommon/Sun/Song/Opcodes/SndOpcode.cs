using System.Diagnostics;

namespace SunCommon;

public abstract class SndOpcode : IRomData
{
    /// <summary>The function this opcode is stored in.</summary>
    public SndFunc Parent { get; set; } = null!;
    /// <summary>Marks if the opcode ends the function.</summary>
    public bool Terminates { get; init; }
    /// <summary>Subroutine number, autogenerated by the <see cref="DataWriter"/>, necessary due to potential call targets inside other subroutines.</summary>
    internal int? CallNum { get; set; }
    /// <summary>Jump number, autogenerated by the <see cref="DataWriter"/>.</summary>
    internal int? JumpNum { get; set; }

    public string? GetLabel()
    {
        Parent.EnsureSet();
        Parent.Parent.EnsureSet();
        Parent.Parent.Parent.EnsureSet();
        Parent.Parent.Parent.Parent.EnsureSet();

        string prefix, suffix;
        // Special overrides for the start of functions
        if (Parent.Opcodes[0] == this)
        {
            if (Parent.Parent.Main.Opcodes[0] == this)  // Start of main func
            {
                prefix = "SndData";
                suffix = "";
            }
            else // Start of current func
            {
                Debug.Assert(Parent.SubId.HasValue, "The parent subroutine should have a SubId value!");
                prefix = "SndCall";
                suffix = $"_{Parent.SubId:X}";
            }
        }
        else if (CallNum != null) // Calls
        {
            prefix = "SndCall";
            suffix = $"_{CallNum:X}";
        }
        else if (JumpNum != null) // Jumps
        {
            prefix = "SndData";
            suffix = "";
        }
        else // No label
        {
            return null;
        }

        return $"{prefix}_{Parent.Parent.Parent.Parent.Name}_Ch{Parent.Parent.Parent.SoundChannelPtr.Normalize()}{(Parent.IsUnused ? "_Unused" : "")}{suffix}{(JumpNum.HasValue ? $"_{JumpNum:X}" : "")}";
    }

    public abstract int SizeInRom();
    public abstract void WriteToDisasm(IMultiWriter sw);
}